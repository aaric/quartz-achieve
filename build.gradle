plugins {
    id "java"
    id "io.freefair.lombok" version "4.1.6" apply false
    id "io.spring.dependency-management" version "1.0.10.RELEASE" apply false
    id "org.springframework.boot" version "2.2.5.RELEASE" apply false
}

allprojects {
    group = "com.sample"
    version = "0.2.1-SNAPSHOT"

    ext {
        springBootVersion = "2.2.5.RELEASE"
        springCloudVersion = "Hoxton.SR3"
        springCloudAlibabaVersion = "2.2.1.RELEASE"
    }

    repositories {
        maven { url "https://maven.aliyun.com/repository/public" }
        maven { url "https://repository.incarcloud.com/content/groups/public" }
    }
}

subprojects {
    apply plugin: "java"
    apply plugin: "checkstyle"
    apply plugin: "io.freefair.lombok"
    apply plugin: "io.spring.dependency-management"

    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

    configurations {
        developmentOnly
        runtimeClasspath {
            extendsFrom developmentOnly
        }
        /*all {
            exclude group: "org.springframework.boot", module: "spring-boot-starter-logging"
        }*/
    }

    dependencies {
        implementation "org.slf4j:slf4j-api"

        testImplementation "org.junit.jupiter:junit-jupiter-api"
        testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine"
        testImplementation("org.springframework.boot:spring-boot-starter-test") {
            exclude group: "junit", module: "junit"
            exclude group: "org.junit.vintage", module: "junit-vintage-engine"
        }

        developmentOnly "org.springframework.boot:spring-boot-devtools"
    }

    dependencyManagement {
        imports {
            mavenBom "org.springframework.boot:spring-boot-dependencies:$springBootVersion"
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:$springCloudVersion"
            mavenBom "com.alibaba.cloud:spring-cloud-alibaba-dependencies:$springCloudAlibabaVersion"
        }

        dependencies {
            dependencySet(group: "org.slf4j", version: "1.7.30") {
                entry "slf4j-api"
                entry "slf4j-simple"
                entry "slf4j-log4j12"
            }

            dependency "commons-io:commons-io:2.6"
            dependency "commons-net:commons-net:3.6"
            dependency "org.apache.commons:commons-io:1.3.2"
            dependency "org.apache.commons:commons-lang3:3.10"

            dependency "io.springfox:springfox-swagger2:2.9.2"
            dependency "com.github.xiaoymin:knife4j-spring-boot-starter:2.0.4"

            // quartz-2.3.0-distribution.tar.gz\quartz-2.3.0-SNAPSHOT\src\org\quartz\impl\jdbcjobstore
//            dependency "org.quartz-scheduler:quartz:2.3.2"
//            dependency "org.quartz-scheduler:quartz-jobs:2.3.2"

            dependency "mysql:mysql-connector-java:5.1.49"
            dependency "com.zaxxer:HikariCP:3.4.5"
            dependency "com.mchange:c3p0:0.9.5.5"
        }
    }

    compileJava {
        options.encoding = "UTF-8"
        options.compilerArgs << "-Xlint:unchecked"
    }

    compileTestJava {
        options.encoding = "UTF-8"
        options.compilerArgs << "-Xlint:unchecked"
    }

    test {
        useJUnitPlatform()
    }

    task checkstyle(type: Checkstyle) {
        configFile file("${rootDir}/config/checkstyle/checkstyle.xml")
        ignoreFailures true
        showViolations true
        source = fileTree("src")
        include "**/*.java"
        exclude "**/test/**"
        exclude "**/build/**"
        classpath = files()
    }

    task removeLombokConfig() {
        def subProjectPath = project.projectDir
        if (null != subProjectPath) {
            def lombokConfigFile = new File(subProjectPath, "lombok.config")
            if (lombokConfigFile.exists()) {
                lombokConfigFile.delete()
            }
        }
    }

    task removeOutputLog() {
        def subProjectPath = project.projectDir
        if (null != subProjectPath) {
            subProjectPath.list().each { filename ->
                if (filename.endsWith(".log")) {
                    def logFile = new File(subProjectPath, filename)
                    if (logFile.exists()) {
                        logFile.delete()
                    }
                }
            }
        }
    }

    defaultTasks "assemble"
}